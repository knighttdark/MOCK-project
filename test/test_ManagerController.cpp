// #include <gtest/gtest.h>
// #include "controller/ManagerController.h"
// #include "controller/DefaultScreenController.h"
// #include "view/DefaultScreenView.h"
// #include "view/ManagerView.h"
// #include <gmock/gmock.h>
// TEST(ManagerControllerTest, InitializeViewsTest) {
//     ManagerController& controller = ManagerController::getInstance();
//     ManagerView& view = ManagerView::getInstance();

    
//     controller.initializeViews();


//     EXPECT_NE(view.getView(), nullptr); 
//     EXPECT_EQ(view.getCurrentViewKey(), "Default");  

//     // Ki·ªÉm tra c√°c controller ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω
//     EXPECT_NE(controller.getController("Default"), nullptr);  
//     EXPECT_NE(controller.getController("MediaFile"), nullptr); 
//     EXPECT_NE(controller.getController("Playlist"), nullptr);  
//     EXPECT_NE(controller.getController("PlayingView"), nullptr); 
// }

// // TEST(ManagerControllerTest, NoViewErrorTest) {
// //     ManagerController& controller = ManagerController::getInstance();
// //     ManagerView& view = ManagerView::getInstance();

// //     // ƒê·∫∑t view hi·ªán t·∫°i l√† null
// //     view.setView("");

// //     // Ch·∫°y h√†m run
// //     testing::internal::CaptureStderr();
// //     controller.run();
// //     std::string output = testing::internal::GetCapturedStderr();

// //     // Ki·ªÉm tra th√¥ng b√°o l·ªói
// //     EXPECT_NE(output.find("Error: Current view is null!"), std::string::npos);
// // }




// class MockView : public BaseView {
// public:
//     MOCK_METHOD(int, showMenu, (), (override));
// };

// class MockController : public BaseController {
// public:
//     MOCK_METHOD(void, handleAction, (int action), (override));
// };

// // TEST(ManagerControllerTest, RunLogicTest) {
// //     ManagerController& controller = ManagerController::getInstance();
// //     ManagerView& view = ManagerView::getInstance();

// //     // T·∫°o Mock cho View v√† Controller
// //     MockView* mockView = new MockView();
// //     MockController* mockController = new MockController();

// //     // ƒêƒÉng k√Ω Mock View v√† Controller
// //     view.registerView("MockView", mockView);
// //     controller.registerController("MockView", mockController);
// //     view.setView("MockView");

// //     // Gi·∫£ l·∫≠p input t·ª´ Mock View
// //     EXPECT_CALL(*mockView, showMenu())
// //         .Times(1)
// //         .WillOnce(::testing::Return(1));  // Tr·∫£ v·ªÅ action = 1

// //     // Gi·∫£ l·∫≠p h√†nh vi c·ªßa Mock Controller khi nh·∫≠n action = 1
// //     EXPECT_CALL(*mockController, handleAction(1))
// //         .Times(1);

// //     // Ch·∫°y logic ch√≠nh
// //     controller.run();
// // }

// //destructor
// TEST(ManagerControllerTest, DestructorClearsControllers) {
//     ManagerController& controller = ManagerController::getInstance();
//     controller.initializeViews();

//     EXPECT_NE(controller.getController("Default"), nullptr);

//     controller.~ManagerController();  // G·ªçi Destructor th·ªß c√¥ng

//     EXPECT_EQ(controller.getController("Default"), nullptr);
// }
// //override controller
// TEST(ManagerControllerTest, RegisterControllerOverride) {
//     ManagerController& controller = ManagerController::getInstance();
//     controller.initializeViews();

//     BaseController* oldController = controller.getController("Default");
//     BaseController* newController = new DefaultScreenController();

//     controller.registerController("Default", newController);

//     EXPECT_NE(controller.getController("Default"), oldController);
//     EXPECT_EQ(controller.getController("Default"), newController);
// }

// //key not exist
// TEST(ManagerControllerTest, GetNonExistentController) {
//     ManagerController& controller = ManagerController::getInstance();
//     EXPECT_EQ(controller.getController("NonExistent"), nullptr);
// }

// // exception
// TEST(ManagerControllerTest, ConstructorCatchException) {
//     // Gi·∫£ l·∫≠p ngo·∫°i l·ªá trong loadFromFile
//     ManagerModel& model = ManagerModel::getInstance();
//     EXPECT_THROW({
//         throw std::runtime_error("Test exception");
//     }, std::runtime_error);

//     testing::internal::CaptureStderr();
//     ManagerController& controller = ManagerController::getInstance();
//     std::string output = testing::internal::GetCapturedStderr();

//     EXPECT_NE(output.find("Error loading playlists: Test exception"), std::string::npos);
// }

// TEST(ManagerControllerTest, GetManagerInstances) {
//     // L·∫•y singleton instance c·ªßa ManagerController
//     ManagerController& controller = ManagerController::getInstance();

//     // Ki·ªÉm tra ManagerView
//     ManagerView* view = controller.getManagerView();
//     EXPECT_NE(view, nullptr); // ƒê·∫£m b·∫£o view kh√¥ng ph·∫£i nullptr
//     EXPECT_EQ(view, &ManagerView::getInstance()); // ƒê·∫£m b·∫£o view tr·∫£ v·ªÅ l√† instance c·ªßa ManagerView

//     // Ki·ªÉm tra ManagerModel
//     ManagerModel* model = controller.getManagerModel();
//     EXPECT_NE(model, nullptr); // ƒê·∫£m b·∫£o model kh√¥ng ph·∫£i nullptr
//     EXPECT_EQ(model, &ManagerModel::getInstance()); // ƒê·∫£m b·∫£o model tr·∫£ v·ªÅ l√† instance c·ªßa ManagerModel
// }
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include "controller/ManagerController.h"
#include "view/ManagerView.h"
#include "common/BaseView.h"
#include "common/BaseController.h"
#include "controller/DefaultScreenController.h"

using ::testing::Return;


// Mock View ƒë·ªÉ test m√† kh√¥ng c·∫ßn ch·∫°y UI th·ª±c t·∫ø
class MockView : public BaseView {
public:
    MOCK_METHOD(int, showMenu, (), (override));
};

// Mock Controller ƒë·ªÉ ki·ªÉm tra handleAction
class MockController : public BaseController {
public:
    MOCK_METHOD(void, handleAction, (int action), (override));
};

// ‚úÖ **1. Test initializeViews()**
TEST(ManagerControllerTest, InitializeViews) {
    ManagerController& controller = ManagerController::getInstance();
    controller.initializeViews();

    EXPECT_NE(controller.getController("Default"), nullptr);
    EXPECT_NE(controller.getController("MediaFile"), nullptr);
    EXPECT_NE(controller.getController("Playlist"), nullptr);
    EXPECT_NE(controller.getController("PlayingView"), nullptr);
}

// ‚úÖ **2. Test getController()**
TEST(ManagerControllerTest, GetController) {
    ManagerController& controller = ManagerController::getInstance();
    controller.initializeViews();

    EXPECT_NE(controller.getController("Default"), nullptr);
    EXPECT_EQ(controller.getController("NonExistent"), nullptr);
}

// ‚úÖ **3. Test registerController()**
// TEST(ManagerControllerTest, RegisterController) {
//     ManagerController& controller = ManagerController::getInstance();
//     controller.initializeViews();

//     BaseController* oldController = controller.getController("Default");
//     BaseController* newController = new DefaultScreenController();

//     controller.registerController("Default", newController);

//     EXPECT_NE(controller.getController("Default"), oldController);
//     EXPECT_EQ(controller.getController("Default"), newController);

//     delete newController; // Cleanup
// }

//‚úÖ **4. Test handleAction() v·ªõi Google Mock**
// TEST(ManagerControllerTest, HandleActionTest) {
//     ManagerController& controller = ManagerController::getInstance();
//     controller.initializeViews();

//     MockController* mockController = new MockController();
//     controller.registerController("MockView", mockController);

//     EXPECT_CALL(*mockController, handleAction(42)).Times(1); // G·ªçi ƒë√∫ng 1 l·∫ßn v·ªõi action = 42

//     controller.getController("MockView")->handleAction(42);

//     delete mockController;
// }

// ‚úÖ **5. Test `run()` v·ªõi Mock (t·ª± ƒë·ªông, kh√¥ng c·∫ßn ng∆∞·ªùi nh·∫≠p)**
// TEST(ManagerControllerTest, RunTestWithMockView_Auto) {
//     ManagerController& controller = ManagerController::getInstance();
//     ManagerView& view = ManagerView::getInstance();

//     MockView* mockView = new MockView();
//     view.registerView("MockView", mockView);
//     view.setView("MockView");

//     MockController* mockController = new MockController();
//     controller.registerController("MockView", mockController);

//     // üöÄ Gi·∫£ l·∫≠p input t·ª´ Mock View: d·ª´ng sau 4 l·∫ßn g·ªçi showMenu()
//     EXPECT_CALL(*mockView, showMenu())
//         .Times(4)  // Ch·ªâ mong ƒë·ª£i 4 l·∫ßn
//         .WillOnce(Return(1))
//         .WillOnce(Return(2))
//         .WillOnce(Return(3))
//         .WillOnce(Return(-1)) // D·ª´ng v√≤ng l·∫∑p
//         .WillRepeatedly(Return(-1)); // üöÄ N·∫øu b·ªã g·ªçi qu√° s·ªë l·∫ßn mong ƒë·ª£i, lu√¥n tr·∫£ v·ªÅ -1

//     // üöÄ Gi·∫£ l·∫≠p h√†nh vi c·ªßa Mock Controller khi nh·∫≠n action
//     EXPECT_CALL(*mockController, handleAction(1)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(2)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(3)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(0)).Times(::testing::AtMost(1)); // Ignore action = 0 n·∫øu c√≥

//     controller.run();  // Ch·∫°y `run()` nh∆∞ng s·∫Ω t·ª± d·ª´ng

//     delete mockView;
//     delete mockController;
// }
// ‚úÖ **5. Test `run()` v·ªõi Mock (t·ª± ƒë·ªông, kh√¥ng c·∫ßn ng∆∞·ªùi nh·∫≠p)**
// TEST(ManagerControllerTest, RunTestWithMockView_Auto) {
//     ManagerController& controller = ManagerController::getInstance();
//     ManagerView& view = ManagerView::getInstance();

//     MockView* mockView = new MockView();
//     view.registerView("MockView", mockView);
//     view.setView("MockView");

//     MockController* mockController = new MockController();
//     controller.registerController("MockView", mockController);

//     // üöÄ Gi·∫£ l·∫≠p input t·ª´ Mock View ƒë·ªÉ d·ª´ng sau 5 l·∫ßn g·ªçi
//     EXPECT_CALL(*mockView, showMenu())
//         .Times(5)
//         .WillOnce(Return(1))
//         .WillOnce(Return(2))
//         .WillOnce(Return(3))
//         .WillOnce(Return(4))
//         .WillOnce(Return(-1));  // L·∫ßn cu·ªëi c√πng tr·∫£ v·ªÅ -1 ƒë·ªÉ tho√°t

//     // üöÄ Gi·∫£ l·∫≠p h√†nh vi c·ªßa Mock Controller khi nh·∫≠n action
//     EXPECT_CALL(*mockController, handleAction(1)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(2)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(3)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(4)).Times(1);
//     EXPECT_CALL(*mockController, handleAction(0)).Times(0);  // üöÄ Kh√¥ng cho ph√©p g·ªçi action(0)

//     controller.run(true);  // üöÄ Ch·∫°y `run(true)` ƒë·ªÉ b·∫≠t ch·∫ø ƒë·ªô test

//     delete mockView;
//     delete mockController;
// }

// // ‚úÖ **6. Test khi kh√¥ng c√≥ View ƒë∆∞·ª£c thi·∫øt l·∫≠p**
// TEST(ManagerControllerTest, NoViewErrorTest) {
//     ManagerController& controller = ManagerController::getInstance();
//     ManagerView& view = ManagerView::getInstance();

//     // ƒê·∫∑t View hi·ªán t·∫°i th√†nh null
//     view.setView("");

//     testing::internal::CaptureStderr();
//     controller.run();
//     std::string output = testing::internal::GetCapturedStderr();

//     // Ki·ªÉm tra th√¥ng b√°o l·ªói
//     EXPECT_NE(output.find("Error: No controller found for view"), std::string::npos);
// }

// ‚úÖ **7. Test Destructor c·ªßa ManagerController**
// TEST(ManagerControllerTest, DestructorClearsControllers) {
//     ManagerController& controller = ManagerController::getInstance();
//     controller.initializeViews();

//     EXPECT_NE(controller.getController("Default"), nullptr);

//     controller.~ManagerController();  // G·ªçi Destructor th·ªß c√¥ng

//     EXPECT_EQ(controller.getController("Default"), nullptr);
// }

// ‚úÖ **8. Test l·∫•y instance c·ªßa ManagerView & ManagerModel**
TEST(ManagerControllerTest, GetManagerInstances) {
    ManagerController& controller = ManagerController::getInstance();

    // Ki·ªÉm tra ManagerView
    ManagerView* view = controller.getManagerView();
    EXPECT_NE(view, nullptr);
    EXPECT_EQ(view, &ManagerView::getInstance());

    // Ki·ªÉm tra ManagerModel
    ManagerModel* model = controller.getManagerModel();
    EXPECT_NE(model, nullptr);
    EXPECT_EQ(model, &ManagerModel::getInstance());
}
