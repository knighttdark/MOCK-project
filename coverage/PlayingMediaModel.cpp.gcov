        -:    0:Source:src/model/PlayingMediaModel.cpp
        -:    0:Graph:build/objects/src/model/PlayingMediaModel.gcno
        -:    0:Data:build/objects/src/model/PlayingMediaModel.gcda
        -:    0:Runs:2
        -:    1:#include "model/PlayingMediaModel.h"
        -:    2:
        2:    3:PlayingMediaModel::PlayingMediaModel()
        2:    4:    : isRunning(true), isPlaying(false), currentMediaFile(nullptr),
        2:    5:      currentMusic(nullptr), volume(50), currentTime(0), duration(0) {}
        -:    6:
        2:    7:PlayingMediaModel::~PlayingMediaModel() {
        2:    8:    if (currentMusic) {
    #####:    9:        Mix_FreeMusic(currentMusic);
        -:   10:    }
        2:   11:}
        -:   12:
    #####:   13:bool PlayingMediaModel::getIsRunning() const {
    #####:   14:    return isRunning;
        -:   15:}
        -:   16:
    #####:   17:void PlayingMediaModel::setIsRunning(bool running) {
    #####:   18:    isRunning = running;
    #####:   19:}
        -:   20:
    #####:   21:bool PlayingMediaModel::getIsPlaying() const {
    #####:   22:    return isPlaying;
        -:   23:}
        -:   24:
    #####:   25:void PlayingMediaModel::setIsPlaying(bool playing) {
    #####:   26:    isPlaying = playing;
    #####:   27:}
        -:   28:
    #####:   29:MediaFile* PlayingMediaModel::getCurrentMediaFile() const {
    #####:   30:    return currentMediaFile;
        -:   31:}
        -:   32:
    #####:   33:void PlayingMediaModel::setCurrentMediaFile(MediaFile* mediaFile) {
    #####:   34:    currentMediaFile = mediaFile;
    #####:   35:}
        -:   36:
    #####:   37:Mix_Music* PlayingMediaModel::getCurrentMusic() const {
    #####:   38:    return currentMusic;
        -:   39:}
        -:   40:
    #####:   41:void PlayingMediaModel::setCurrentMusic(Mix_Music* music) {
    #####:   42:    currentMusic = music;
    #####:   43:}
        -:   44:
    #####:   45:int PlayingMediaModel::getVolume() const {
    #####:   46:    return volume;
        -:   47:}
        -:   48:
    #####:   49:void PlayingMediaModel::setVolume(int vol) {
    #####:   50:    volume = vol;
    #####:   51:}
        -:   52:
    #####:   53:int PlayingMediaModel::getCurrentTime() const {
    #####:   54:    return currentTime;
        -:   55:}
        -:   56:
    #####:   57:void PlayingMediaModel::setCurrentTime(int time) {
    #####:   58:    currentTime = time;
    #####:   59:}
        -:   60:
    #####:   61:int PlayingMediaModel::getDuration() const {
    #####:   62:    return duration;
        -:   63:}
        -:   64:
    #####:   65:void PlayingMediaModel::setDuration(int dur) {
    #####:   66:    duration = dur;
    #####:   67:}
        -:   68:
    #####:   69:void PlayingMediaModel::reset() {
    #####:   70:    if (currentMusic) {
    #####:   71:        Mix_HaltMusic();
    #####:   72:        Mix_FreeMusic(currentMusic);
    #####:   73:        currentMusic = nullptr;
        -:   74:    }
    #####:   75:    currentMediaFile = nullptr;
    #####:   76:    currentTime = 0;
    #####:   77:    duration = 0;
    #####:   78:    isPlaying = false;
    #####:   79:}
