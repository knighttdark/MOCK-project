        -:    0:Source:src/model/MediaLibrary.cpp
        -:    0:Graph:build/objects/src/model/MediaLibrary.gcno
        -:    0:Data:build/objects/src/model/MediaLibrary.gcda
        -:    0:Runs:2
        -:    1:#include "model/MediaLibrary.h"
        -:    2:#include <filesystem>
        -:    3:#include <algorithm>
        -:    4:#include <iostream>
        -:    5:namespace fs = filesystem;
        -:    6:
    #####:    7:void MediaLibrary::addMediaFile(const MediaFile& file) {
    #####:    8:    mediaFiles.push_back(file);
    #####:    9:}
        -:   10:
    #####:   11:int MediaLibrary::getTotalPages(int pageSize) const {
    #####:   12:    return (mediaFiles.size() + pageSize - 1) / pageSize;
        -:   13:}
        -:   14:
    #####:   15:vector<MediaFile> MediaLibrary::getMediaFilesForPage(int page, int pageSize) const {
    #####:   16:    int start = page * pageSize;
    #####:   17:    int end = min(static_cast<int>(mediaFiles.size()), start + pageSize);
    #####:   18:    return vector<MediaFile>(mediaFiles.begin() + start, mediaFiles.begin() + end);
        -:   19:}
        -:   20:
    #####:   21:void MediaLibrary::scanDirectory(const string& path) {
        -:   22:    try {
    #####:   23:        mediaFiles.clear();
        -:   24:
    #####:   25:        int currentIndex = 1;
    #####:   26:        for (const auto& entry : fs::directory_iterator(path)) {
    #####:   27:            if (entry.is_regular_file()) {
    #####:   28:                string extension = entry.path().extension().string();
        -:   29:
    #####:   30:                if (extension == ".mp3" || extension == ".mp4") {
    #####:   31:                    mediaFiles.emplace_back(
    #####:   32:                        currentIndex++,
    #####:   33:                        entry.path().filename().string(),
    #####:   34:                        entry.path().string(),
        -:   35:                        extension
        -:   36:                    );
        -:   37:                }
    #####:   38:            }
    #####:   39:        }
    =====:   40:    } catch (const exception& e) {
    =====:   41:        cerr << "Error scanning directory: " << e.what() << endl;
    =====:   42:    }
    #####:   43:}
        -:   44:
    #####:   45:vector<MediaFile>& MediaLibrary::getMediaFiles() {
    #####:   46:    return mediaFiles;
        -:   47:}
        -:   48:
        -:   49:
        -:   50:
    #####:   51:void MediaLibrary::scanUSBDevice() {
    #####:   52:    scanDirectory("/media/username/");
    #####:   53:}
