        -:    0:Source:src/view/PlaylistView.cpp
        -:    0:Graph:build/objects/src/view/PlaylistView.gcno
        -:    0:Data:build/objects/src/view/PlaylistView.gcda
        -:    0:Runs:1
        -:    1:#include "view/PlaylistView.h"
        -:    2:#include "common/Exception.h"
        -:    3:#include <iostream>
        -:    4:#include <iomanip>
        -:    5:
    #####:    6:int PlaylistView::showMenu() {
        -:    7:    MenuRenderer menu("Playlist Menu",
        -:    8:                      {"1. Create a new playlist", "2. Delete a playlist",
        -:    9:                       "3. View playlist details", "4. List all playlists",
        -:   10:                       "5. Play Songs", "0. Exit"},
    #####:   11:                      {1, 2, 3, 4, 5, 0});
    #####:   12:    return menu.render();
    #####:   13:}
        -:   14:
    #####:   15:const string& PlaylistView::getSelectedPath() const {
    #####:   16:    return selectedPath;
        -:   17:}
        -:   18:
        -:   19:
    #####:   20:void PlaylistView::setSelectedPath(const string& path) {
    #####:   21:    selectedPath = path;
    #####:   22:}
        -:   23:
        -:   24:
    #####:   25:int PlaylistView::getSelectedPlaylistID() const {
    #####:   26:        return selected_playlist_ID;
        -:   27:    }
        -:   28:
    #####:   29:void PlaylistView::setSelectedPlaylistID(int id) {
    #####:   30:    selected_playlist_ID = id;
    #####:   31:}
        -:   32:
    #####:   33:const string& PlaylistView::getSelectedPlaylistName() const {
    #####:   34:        return selected_playlist_name;
        -:   35:}
    #####:   36:void PlaylistView::setSelectedPlaylistName( string name) {
    #####:   37:        selected_playlist_name = name;
    #####:   38:}
        -:   39:
    #####:   40:void PlaylistView::displayPlaylists(const vector<Playlist>& playlists) {
    #####:   41:    if (playlists.empty()) {
    #####:   42:        cout << "No playlists available.\n";
    #####:   43:        return;
        -:   44:    }
        -:   45:
    #####:   46:    vector<string> playlist_entries;
    #####:   47:    for (size_t i = 0; i < playlists.size(); ++i) {
    #####:   48:        const auto& playlist = playlists[i];
        -:   49:
    #####:   50:        string id_column = to_string(i + 1);
    #####:   51:        string name_column = playlist.getName();
    #####:   52:        string song_count_column = to_string(playlist.getSongs().size()) + " songs";
        -:   53:
    #####:   54:        id_column += string(4 - id_column.length(), ' ');
    #####:   55:        name_column += string(20 - name_column.length(), ' ');
    #####:   56:        song_count_column = string(10 - song_count_column.length(), ' ') + song_count_column;
        -:   57:
    #####:   58:        string entry = id_column + " | " + name_column + " | " + song_count_column;
    #####:   59:        playlist_entries.push_back(entry);
    #####:   60:    }
        -:   61:
    #####:   62:    int selected_index = 0;
        -:   63:
    #####:   64:    auto playlist_menu = Menu(&playlist_entries, &selected_index);
        -:   65:
    #####:   66:    auto screen = ScreenInteractive::TerminalOutput();
        -:   67:
    #####:   68:    auto main_renderer = Renderer([&] {
    #####:   69:        return vbox({
    #####:   70:                   text("=== Playlists ===") | bold | center,
        -:   71:                   separator(),
    #####:   72:                   playlist_menu->Render() | border,
        -:   73:                   separator(),
    #####:   74:                   text("Use UP/DOWN or click to navigate, ENTER to select.") | dim | center,
        -:   75:               }) |
    #####:   76:               center;
    #####:   77:    });
        -:   78:
    #####:   79:    auto main_component = CatchEvent(main_renderer, [&](Event event) {
    #####:   80:    if (event == Event::Return) {
    #####:   81:        if (selected_index >= 0 && selected_index < (int)playlists.size()) {
    #####:   82:            setSelectedPlaylistID(selected_index + 1);
    #####:   83:            screen.ExitLoopClosure()();
        -:   84:        }
    #####:   85:        return true;
        -:   86:    }
        -:   87:
    #####:   88:    if (event.is_mouse() && event.mouse().button == Mouse::Left && event.mouse().motion == Mouse::Pressed) {
    #####:   89:        int clicked_index = event.mouse().y - 3;
    #####:   90:        if (clicked_index >= 0 && clicked_index < (int)playlist_entries.size()) {
    #####:   91:            selected_index = clicked_index;
    #####:   92:            setSelectedPlaylistID(selected_index + 1);
    #####:   93:            screen.ExitLoopClosure()();
        -:   94:        }
    #####:   95:        return true;
        -:   96:    }
        -:   97:
    #####:   98:    return playlist_menu->OnEvent(event);
    #####:   99:    });
        -:  100:
    #####:  101:    screen.Loop(main_component);
    #####:  102:}
        -:  103:
    #####:  104:void PlaylistView::displayPlaylistDetails(const Playlist& playlist) {
    #####:  105:    const auto& songs = playlist.getSongs();
        -:  106:
    #####:  107:    if (songs.empty()) {
    #####:  108:        auto empty_renderer = Renderer([] {
    #####:  109:            return vbox({
    #####:  110:                text("No songs in this playlist.") | bold | center,
        -:  111:                separator(),
    #####:  112:                text("Press ENTER to return.") | dim | center
    #####:  113:            }) | center;
    #####:  114:        });
        -:  115:
    #####:  116:        auto screen = ScreenInteractive::TerminalOutput();
    #####:  117:        auto main_component = CatchEvent(empty_renderer, [&](Event event) {
    #####:  118:            if (event == Event::Return) {
    #####:  119:                screen.ExitLoopClosure()();
    #####:  120:                return true;
        -:  121:            }
    #####:  122:            return false;
    #####:  123:        });
        -:  124:
    #####:  125:        screen.Loop(main_component);
    #####:  126:        return;
    #####:  127:    }
        -:  128:
    #####:  129:    vector<string> menu_entries;
    #####:  130:    for (const auto& song : songs) {
    #####:  131:        menu_entries.push_back(song.getName());
        -:  132:    }
        -:  133:
    #####:  134:    int selected = 0;
    #####:  135:    auto menu = Menu(&menu_entries, &selected);
        -:  136:
    #####:  137:    string currentPath;
        -:  138:
    #####:  139:    auto renderer = Renderer(menu, [&] {
    #####:  140:        return vbox({
    #####:  141:            text("=== Playlist Details: " + playlist.getName() + " ===") | bold | center,
        -:  142:            separator(),
    #####:  143:            menu->Render() | border | center,
        -:  144:            separator(),
    #####:  145:            text("Path: " + currentPath) | dim | center,
    #####:  146:            text("Use Arrow Keys to navigate, ENTER to select.") | dim | center
    #####:  147:        }) | center;
    #####:  148:    });
        -:  149:
    #####:  150:    auto screen = ScreenInteractive::TerminalOutput();
    #####:  151:    auto main_component = CatchEvent(renderer, [&](Event event) {
        -:  152:
    #####:  153:        if (event == Event::Return) {
    #####:  154:            if (selected >= 0 && selected < (int)songs.size()) {
    #####:  155:                setSelectedPath(songs[selected].getPath());
    #####:  156:                cout << "Selected song path: " << currentPath << endl;
    #####:  157:                screen.ExitLoopClosure()();
        -:  158:            }
    #####:  159:            return true;
        -:  160:        }
        -:  161:
    #####:  162:        if (event.is_mouse() && event.mouse().button == Mouse::Left && event.mouse().motion == Mouse::Pressed) {
    #####:  163:            int clicked_index = event.mouse().y - 3;
    #####:  164:            if (clicked_index >= 0 && clicked_index < (int)songs.size()) {
    #####:  165:                selected = clicked_index;
    #####:  166:                setSelectedPath(songs[selected].getPath());
        -:  167:            }
    #####:  168:            return true;
        -:  169:        }
        -:  170:
    #####:  171:        if (event == Event::ArrowUp || event == Event::ArrowDown) {
    #####:  172:            menu->OnEvent(event);
    #####:  173:            currentPath = songs[selected].getPath();
    #####:  174:            return true;
        -:  175:        }
        -:  176:
    #####:  177:        return false;
    #####:  178:    });
        -:  179:
    #####:  180:    screen.Loop(main_component);
    #####:  181:}
        -:  182:
        -:  183:
        -:  184:
